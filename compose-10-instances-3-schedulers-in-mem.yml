version: '3.4'
services:
  postgres-db:
    image: postgres:16.2-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=wO2VGDsMKR
      - max_wal_size=2GB
    ports:
      - '5432:5432'
    networks:
      - network
    volumes: 
      - postgres-db-16-2:/var/lib/postgresql/data-16-2
  ############################
  # Workflow App + Dapr sidecar
  ############################
  workflow-app-a:
    environment:
      - APP_INSTANCE=1
    build:
      context: .
      dockerfile: Workflow/Dockerfile
    ports:
      - "3500:3500" # only important so we can reach the Dapr HTTP sidecar from the host for testing purposes
      - "5113:5111"
      - "7777:7776"
    depends_on:
      - placement
    networks:
      - network
  workflow-dapr-a:
    image: "daprio/daprd:1.14.4"
    command: ["./daprd",
     "-app-id", "workflow-a",
     "-app-port", "5111",
     "-placement-host-address", "placement:50005",
     "-scheduler-host-address", "scheduler-0:50006,scheduler-1:50006,scheduler-2:50006",
     "-resources-path", "/components",
     "-config", "/dapr-config/config-with-schedule-reminders-feature.yml",
     "-log-level","info"]
    volumes:
      - "./components-in-mem/:/components"
      - "./dapr-config/:/dapr-config"
    depends_on:
      postgres-db:
        condition: service_started
      kafka:
        condition: service_healthy
    network_mode: "service:workflow-app-a"
  ############################
  # Workflow App + Dapr sidecar
  ############################
  workflow-app-b:
    environment:
      - DAPR_GRPC_PORT=50002
      - APP_INSTANCE=2
    build:
      context: .
      dockerfile: Workflow/Dockerfile
    ports:
      - "3501:3500" # only important so we can reach the Dapr HTTP sidecar from the host for testing purposes
    depends_on:
      - placement
    networks:
      - network
  workflow-dapr-b:
    image: "daprio/daprd:1.14.4"
    command: ["./daprd",
     "-app-id", "workflow-a",
     "-app-port", "5111",
     "-dapr-grpc-port", "50002",
     "-placement-host-address", "placement:50005",
     "-scheduler-host-address", "scheduler-0:50006,scheduler-1:50006,scheduler-2:50006",
     "-resources-path", "/components",
     "-config", "/dapr-config/config-with-schedule-reminders-feature.yml",
     "-log-level","info"]
    volumes:
      - "./components-in-mem/:/components"
      - "./dapr-config/:/dapr-config"
    depends_on:
      postgres-db:
        condition: service_started
      kafka:
        condition: service_healthy
    network_mode: "service:workflow-app-b"
  ############################
  # Workflow App + Dapr sidecar
  ############################
  workflow-app-c:
    environment:
      - DAPR_GRPC_PORT=50003
      - APP_INSTANCE=3
    build:
      context: .
      dockerfile: Workflow/Dockerfile
    ports:
      - "3502:3500" # only important so we can reach the Dapr HTTP sidecar from the host for testing purposes
    depends_on:
      - placement
    networks:
      - network
  workflow-dapr-c:
    image: "daprio/daprd:1.14.4"
    command: ["./daprd",
     "-app-id", "workflow-a",
     "-app-port", "5111",
     "-dapr-grpc-port", "50003",
     "-placement-host-address", "placement:50005",
     "-scheduler-host-address", "scheduler-0:50006,scheduler-1:50006,scheduler-2:50006",
     "-resources-path", "/components",
     "-config", "/dapr-config/config-with-schedule-reminders-feature.yml",
     "-log-level","info"]
    volumes:
      - "./components-in-mem/:/components"
      - "./dapr-config/:/dapr-config"
    depends_on:
      postgres-db:
        condition: service_started
      kafka:
        condition: service_healthy
    network_mode: "service:workflow-app-c"
  ############################
  # Workflow App + Dapr sidecar
  ############################
  workflow-app-d:
    environment:
      - DAPR_GRPC_PORT=50004
      - APP_INSTANCE=4
    build:
      context: .
      dockerfile: Workflow/Dockerfile
    ports:
      - "3503:3500" # only important so we can reach the Dapr HTTP sidecar from the host for testing purposes
    depends_on:
      - placement
    networks:
      - network
  workflow-dapr-d:
    image: "daprio/daprd:1.14.4"
    command: ["./daprd",
     "-app-id", "workflow-a",
     "-app-port", "5111",
     "-dapr-grpc-port", "50004",
     "-placement-host-address", "placement:50005",
     "-scheduler-host-address", "scheduler-0:50006,scheduler-1:50006,scheduler-2:50006",
     "-resources-path", "/components",
     "-config", "/dapr-config/config-with-schedule-reminders-feature.yml",
     "-log-level","info"]
    volumes:
      - "./components-in-mem/:/components"
      - "./dapr-config/:/dapr-config"
    depends_on:
      postgres-db:
        condition: service_started
      kafka:
        condition: service_healthy
    network_mode: "service:workflow-app-d"
  ############################
  # Workflow App + Dapr sidecar
  ############################
  workflow-app-e:
    environment:
      - DAPR_GRPC_PORT=50005
      - APP_INSTANCE=5
    build:
      context: .
      dockerfile: Workflow/Dockerfile
    ports:
      - "3504:3500" # only important so we can reach the Dapr HTTP sidecar from the host for testing purposes
    depends_on:
      - placement
    networks:
      - network
  workflow-dapr-e:
    image: "daprio/daprd:1.14.4"
    command: ["./daprd",
     "-app-id", "workflow-a",
     "-app-port", "5111",
     "-dapr-grpc-port", "50005",
     "-placement-host-address", "placement:50005",
     "-scheduler-host-address", "scheduler-0:50006,scheduler-1:50006,scheduler-2:50006",
     "-resources-path", "/components",
     "-config", "/dapr-config/config-with-schedule-reminders-feature.yml",
     "-log-level","info"]
    volumes:
      - "./components-in-mem/:/components"
      - "./dapr-config/:/dapr-config"
    depends_on:
      postgres-db:
        condition: service_started
      kafka:
        condition: service_healthy
    network_mode: "service:workflow-app-e"
  ############################
  # Workflow App + Dapr sidecar
  ############################
  workflow-app-f:
    environment:
      - DAPR_GRPC_PORT=50006
      - APP_INSTANCE=6
    build:
      context: .
      dockerfile: Workflow/Dockerfile
    ports:
      - "3505:3500" # only important so we can reach the Dapr HTTP sidecar from the host for testing purposes
    depends_on:
      - placement
    networks:
      - network
  workflow-dapr-f:
    image: "daprio/daprd:1.14.4"
    command: ["./daprd",
     "-app-id", "workflow-a",
     "-app-port", "5111",
     "-dapr-grpc-port", "50006",
     "-placement-host-address", "placement:50005",
     "-scheduler-host-address", "scheduler-0:50006,scheduler-1:50006,scheduler-2:50006",
     "-resources-path", "/components",
     "-config", "/dapr-config/config-with-schedule-reminders-feature.yml",
     "-log-level","info"]
    volumes:
      - "./components-in-mem/:/components"
      - "./dapr-config/:/dapr-config"
    depends_on:
      postgres-db:
        condition: service_started
      kafka:
        condition: service_healthy
    network_mode: "service:workflow-app-f"
  ############################
  # Workflow App + Dapr sidecar
  ############################
  workflow-app-g:
    environment:
      - DAPR_GRPC_PORT=50007
      - APP_INSTANCE=7
    build:
      context: .
      dockerfile: Workflow/Dockerfile
    ports:
      - "3506:3500" # only important so we can reach the Dapr HTTP sidecar from the host for testing purposes
    depends_on:
      - placement
    networks:
      - network
  workflow-dapr-g:
    image: "daprio/daprd:1.14.4"
    command: ["./daprd",
     "-app-id", "workflow-a",
     "-app-port", "5111",
     "-dapr-grpc-port", "50007",
     "-placement-host-address", "placement:50005",
     "-scheduler-host-address", "scheduler-0:50006,scheduler-1:50006,scheduler-2:50006",
     "-resources-path", "/components",
     "-config", "/dapr-config/config-with-schedule-reminders-feature.yml",
     "-log-level","info"]
    volumes:
      - "./components-in-mem/:/components"
      - "./dapr-config/:/dapr-config"
    depends_on:
      postgres-db:
        condition: service_started
      kafka:
        condition: service_healthy
    network_mode: "service:workflow-app-g"
  ############################
  # Workflow App + Dapr sidecar
  ############################
  workflow-app-h:
    environment:
      - DAPR_GRPC_PORT=50008
      - APP_INSTANCE=8
    build:
      context: .
      dockerfile: Workflow/Dockerfile
    ports:
      - "3507:3500" # only important so we can reach the Dapr HTTP sidecar from the host for testing purposes
    depends_on:
      - placement
    networks:
      - network
  workflow-dapr-h:
    image: "daprio/daprd:1.14.4"
    command: ["./daprd",
     "-app-id", "workflow-a",
     "-app-port", "5111",
     "-dapr-grpc-port", "50008",
     "-placement-host-address", "placement:50005",
     "-scheduler-host-address", "scheduler-0:50006,scheduler-1:50006,scheduler-2:50006",
     "-resources-path", "/components",
     "-config", "/dapr-config/config-with-schedule-reminders-feature.yml",
     "-log-level","info"]
    volumes:
      - "./components-in-mem/:/components"
      - "./dapr-config/:/dapr-config"
    depends_on:
      postgres-db:
        condition: service_started
      kafka:
        condition: service_healthy
    network_mode: "service:workflow-app-h"
  ############################
  # Workflow App + Dapr sidecar
  ############################
  workflow-app-i:
    environment:
      - DAPR_GRPC_PORT=50009
      - APP_INSTANCE=9
    build:
      context: .
      dockerfile: Workflow/Dockerfile
    ports:
      - "3508:3500" # only important so we can reach the Dapr HTTP sidecar from the host for testing purposes
    depends_on:
      - placement
    networks:
      - network
  workflow-dapr-i:
    image: "daprio/daprd:1.14.4"
    command: ["./daprd",
     "-app-id", "workflow-a",
     "-app-port", "5111",
     "-dapr-grpc-port", "50009",
     "-placement-host-address", "placement:50005",
     "-scheduler-host-address", "scheduler-0:50006,scheduler-1:50006,scheduler-2:50006",
     "-resources-path", "/components",
     "-config", "/dapr-config/config-with-schedule-reminders-feature.yml",
     "-log-level","info"]
    volumes:
      - "./components-in-mem/:/components"
      - "./dapr-config/:/dapr-config"
    depends_on:
      postgres-db:
        condition: service_started
      kafka:
        condition: service_healthy
    network_mode: "service:workflow-app-i"
  ############################
  # Workflow App + Dapr sidecar
  ############################
  workflow-app-j:
    environment:
      - DAPR_GRPC_PORT=50010
      - APP_INSTANCE=10
    build:
      context: .
      dockerfile: Workflow/Dockerfile
    ports:
      - "3509:3500" # only important so we can reach the Dapr HTTP sidecar from the host for testing purposes
    depends_on:
      - placement
    networks:
      - network
  workflow-dapr-j:
    image: "daprio/daprd:1.14.4"
    command: ["./daprd",
     "-app-id", "workflow-a",
     "-app-port", "5111",
     "-dapr-grpc-port", "50010",
     "-placement-host-address", "placement:50005",
     "-scheduler-host-address", "scheduler-0:50006,scheduler-1:50006,scheduler-2:50006",
     "-resources-path", "/components",
     "-config", "/dapr-config/config-with-schedule-reminders-feature.yml",
     "-log-level","info"]
    volumes:
      - "./components-in-mem/:/components"
      - "./dapr-config/:/dapr-config"
    depends_on:
      postgres-db:
        condition: service_started
      kafka:
        condition: service_healthy
    network_mode: "service:workflow-app-j"
  ###########################
  #Client App + Dapr sidecar
  ###########################
  client-app:
    build:
      context: .
      dockerfile: Client/Dockerfile
    ports:
      - "5112:5111"
    networks:
      - network
  client-dapr:
    image: "daprio/daprd:1.14.4"
    command: ["./daprd",
    "-app-id", "client",
    "-app-port", "5111",
    "-dapr-http-port", "3500",
    "-resources-path", "/components",
    "-log-level","warn"]
    volumes:
      - "./components/:/components"
    depends_on:
      kafka:
        condition: service_healthy
    network_mode: "service:client-app"
  ############################
  # Dapr placement service
  ############################
  placement:
    image: "daprio/dapr:1.14.4"
    command: ["./placement", 
    "-port", "50005",
    "-log-level","warn"]
    networks:
      - network

 # ############################
  # # Dapr Scheduler service
  # ############################
  scheduler-0:
    image: "daprio/dapr:1.14.4"
    command: ["./scheduler", 
    "--etcd-data-dir", "/var/run/dapr/scheduler",
    "--replica-count", "3",
    "--id","scheduler-0",
    "--initial-cluster", "scheduler-0=http://scheduler-0:2380,scheduler-1=http://scheduler-1:2380,scheduler-2=http://scheduler-2:2380",
    "--etcd-client-ports", "scheduler-0=2379,scheduler-1=2379,scheduler-2=2379",
    "--etcd-client-http-ports", "scheduler-0=2330,scheduler-1=2330,scheduler-2=2330"
    ]
    volumes: 
      - ./dapr_scheduler/0:/var/run/dapr/scheduler
    networks:
      - network
  scheduler-1:
    image: "daprio/dapr:1.14.4"
    command: ["./scheduler", 
    "--etcd-data-dir", "/var/run/dapr/scheduler",
    "--replica-count", "3",
    "--id","scheduler-1",
    "--initial-cluster", "scheduler-1=http://scheduler-1:2380,scheduler-0=http://scheduler-0:2380,scheduler-2=http://scheduler-2:2380",
    "--etcd-client-ports", "scheduler-0=2379,scheduler-1=2379,scheduler-2=2379",
    "--etcd-client-http-ports", "scheduler-0=2330,scheduler-1=2330,scheduler-2=2330"
    ]
    volumes: 
      - ./dapr_scheduler/1:/var/run/dapr/scheduler
    networks:
      - network
  scheduler-2:
    image: "daprio/dapr:1.14.4"
    command: ["./scheduler", 
    "--etcd-data-dir", "/var/run/dapr/scheduler",
    "--replica-count", "3",
    "--id","scheduler-2",
    "--initial-cluster", "scheduler-2=http://scheduler-2:2380,scheduler-0=http://scheduler-0:2380,scheduler-1=http://scheduler-1:2380",
    "--etcd-client-ports", "scheduler-0=2379,scheduler-1=2379,scheduler-2=2379",
    "--etcd-client-http-ports", "scheduler-0=2330,scheduler-1=2330,scheduler-2=2330"
    ]
    volumes: 
      - ./dapr_scheduler/2:/var/run/dapr/scheduler
    networks:
      - network

  ############################
  # Zookeeper 
  ############################
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - network
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "true"
    ports:
      - 2181:2181
    volumes:
      - zookeeper_logs:/var/lib/zookeeper/log
      - zookeeper_data:/var/lib/zookeeper/data
  ############################
  # Kafka 
  ############################
  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - network
    restart: unless-stopped
    depends_on:
      - zookeeper
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 10s
      retries: 10
      timeout: 30s
      start_period: 10s
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: ERROR
      KAFKA_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.apache.kafka=ERROR,kafka=ERROR,kafka.cluster=ERROR,kafka.controller=ERROR,kafka.coordinator=ERROR,kafka.log=ERROR,kafka.server=ERROR,kafka.zookeeper=ERROR,state.change.logger=ERROR
      KAFKA_JMX_PORT: 9997
      KAFKA_NUM_PARTITIONS: 10
  ############################
  # Kafka UI
  ############################
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: 'true'
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: 'true'
      LOGGING_LEVEL_ROOT: 'error'
      LOGGING_LEVEL_COM_PROVECTUS: 'error'
    networks:
      - network
networks:
  network:
volumes:
  db-data:
    driver: local
  zookeeper_logs:
    driver: local
  zookeeper_data:
    driver: local
  postgres-db-16-2:
    driver: local